train_feat <- data.matrix(spam[seq(p),trainIdx])
train_feat <- data.matrix(spam[seq(p),trainIdx])
train_feat <- data.matrix(spam[seq(p),trainIdx])
spam[1,2]
spam[1:2,3]
spam[1:2,trainIdx]
print(spam)
train_feat <- data.matrix(spam[trainIdx,1:q])
train_feat <- data.matrix(spam[trainIdx,1:p])
test_feat <- data.matrix(spam[-trainIdx,1:p])
summary(teat_class)
summary(test_class)
summary(test_feat)
View(train_feat)
source('~/Desktop/test.R')
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1,
type.measure="class")
plot(logistic.fitted)
coef(logistic.fitted,logistic.fitted$lambda.1se)
library(ElemStatLearn)
library(glmnet)
library(Matrix)
summary(spam)
sum(is.na(spam))
p <- 57 # Each email is represented by 57 features
n <- length(spam$spam)
trainIdx <- sort(sample(1:n, floor(n*0.7)))
train_class <- spam$spam[trainIdx]
train_feat <- data.matrix(spam[trainIdx,1:p])
test_class <- spam$spam[-trainIdx]
test_feat <- data.matrix(spam[-trainIdx,1:p])
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1,
type.measure="class")
plot(logistic.fitted)
coef(logistic.fitted,logistic.fitted$lambda.1se)
library(ElemStatLearn)
library(glmnet)
library(Matrix)
sum(is.na(spam))
p <- 57 # Each email is represented by 57 features
n <- length(spam$spam)
trainIdx <- sort(sample(1:n, floor(n*0.7)))
train_class <- spam$spam[trainIdx]
train_feat <- data.matrix(spam[trainIdx,1:p])
test_class <- spam$spam[-trainIdx]
test_feat <- data.matrix(spam[-trainIdx,1:p])
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1,
type.measure="class")
plot(logistic.fitted)
coef(logistic.fitted,logistic.fitted$lambda.1se)
predict(logistic.fitted, test_feat, s="lambda.1se")
predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(test_feat, test_pred)
library(pROC)
install.packages("pROC")
library(pROC)
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(test_feat, test_pred)
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(test_feat, test_pred)
roc_obj <- roc(test_feat, as.vector(test_pred))
roc_obj <- roc(as.vector(test_feat), as.vector(test_pred))
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(as.vector(test_feat), as.vector(test_pred))
coef(logistic.fitted)
print(train_class)
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1)
plot(logistic.fitted)
coef(logistic.fitted)
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(as.vector(test_feat), as.vector(test_pred))
roc_obj <- roc(as.vector(test_feat), test_pred)
roc_obj <- roc(as.numeric(test_feat), as.numeric(test_pred)
roc_obj <- roc(as.numeric(test_feat), as.numeric(test_pred))
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(as.numeric(test_feat), as.numeric(test_pred))
as.numeric(test_pred)
roc_obj <- roc(as.interger(test_feat), as.interger(test_pred))
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred
roc_obj <- roc(as.integer(test_feat), as.integer(test_pred))
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
roc_obj <- roc(as.integer(test_feat), as.integer(test_pred))
length(test_pred)
length(test_class)
roc_obj <- roc(as.integer(test_class), as.integer(test_pred))
as.integer(test_class)
as.integer(test_pred)
test_pred
test_class
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="response")
roc_obj <- roc(as.integer(test_class), as.integer(test_pred))
auc(roc_obj)
plot(roc_ojb)
plot(roc_obj)
test_pred
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred
tmp <- rep(0,length(test_pred))
tmp
spam$spam <- as.integer(spam$spam)
spam$spam
spam$spam[1000,1002]
spam$spam[1000:1002]
class[spam$spam[x == 'spam']] = 1
class <- rep(0,n)
class[spam$spam[x == 'spam']] = 1
class[spam$spam[spam$spam == 'spam']] = 1
class
spam$spam
library(ElemStatLearn)
spam$spam
library(ElemStatLearn)
library(glmnet)
library(Matrix)
sum(is.na(spam)) # make sure data is valid
p <- 57 # Each email is represented by 57 features
n <- length(spam$spam)
class <- rep(0,n)
class[spam$spam[spam$spam == 'spam']] = 1
trainIdx <- sort(sample(1:n, floor(n*0.7)))
spam$spam
spam$spam[spam$spam == 'spam']
class[spam$spam[spam$spam == spam]] = 1
class[x[x == spam]] = 1
x <- spam$spam
class[x[x == spam]] = 1
class[x[x == 'spam']] = 1
x <- spam$spam
x
class
class <- factor(spam$spam, c(0,1))
class
class <- factor(spam$spam, labels=c(0,1))
class
class[4000:4200]
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
library(ElemStatLearn)
library(glmnet)
sum(is.na(spam)) # make sure data is valid
p <- 57 # Each email is represented by 57 features
n <- length(spam$spam)
set.seed(123)
class <- factor(spam$spam, labels=c(0,1)) # email = 0, spam = 1
trainIdx <- sort(sample(1:n, floor(n*0.7)))
train_class <- spam$spam[trainIdx]
train_feat <- data.matrix(spam[trainIdx,1:p])
test_class <- spam$spam[-trainIdx]
test_feat <- data.matrix(spam[-trainIdx,1:p])
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1)
plot(logistic.fitted)
C <- coef(logistic.fitted)
paste("Chosen Attribute is as follow, zero means abandoned")
paste("Chosen Attribute is as follow, zero means abandoned",c)
paste("Chosen Attribute is as follow, zero means abandoned",C)
coef(logistic.fitted)
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se")
test_pred
test_pred <-predict(logistic.fitted, test_feat, s="class")
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred
test_pred <-predict(logistic.fitted, test_feat, s="lambda.1se",type="response")
test_pred
test_pred
test_pred <- predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred
test_pred[0:100]
names(coefficients[which(Coefficients != 0),])
coefficients <- coef(logistic.fitted, s="lambda.1se")
names(coefficients[which(Coefficients != 0),])
names(coefficients[which(coefficients != 0),])
tmp[test_pred[test_pred == 'spam']] = 1
tmp <- rep(0,length(test_pred))
tmp[test_pred[test_pred == 'spam']] = 1
tmp
tmp[1:50]
test_pred[test_pred == 'spam']
tmp[[test_pred == 'spam']] = 1
[test_pred == 'spam']
tmp[test_pred == 'spam'] = 1
tmp
tmp[1:10]
test_pred[1:10]
roc_obj <- roc(test_class, tmp)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp)
plot(roc_obj)
auc(roc_obj)
auc(roc_obj)
roc_obj <- roc(test_class, tmp)
plot(roc_obj)
library(ElemStatLearn)
library(glmnet)
sum(is.na(spam)) # make sure data is valid
p <- 57 # Each email is represented by 57 features
n <- length(spam$spam)
set.seed(123)
class <- factor(spam$spam, labels=c(0,1)) # email = 0, spam = 1
trainIdx <- sort(sample(1:n, floor(n*0.75)))
train_class <- spam$spam[trainIdx]
train_feat <- data.matrix(spam[trainIdx,1:p])
test_class <- spam$spam[-trainIdx]
test_feat <- data.matrix(spam[-trainIdx,1:p])
logistic.fitted <- cv.glmnet(train_feat,train_class,
family = "binomial",
alpha=1)
plot(logistic.fitted)
coefficients <- coef(logistic.fitted, s="lambda.1se")
names(coefficients[which(coefficients != 0),])
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.1se",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp)
plot(roc_obj)
auc(roc_obj)
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_obj)
auc(roc_obj)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.min",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_obj)
auc(roc_obj)
plot(roc_obj,xlim=c(0,1))
plot(roc_obj,xlim=c(0,1),ylim=c(0,1))
plot(roc_obj)
auc(roc_obj)
spam
class
class[3000:3100]
logistic.fitted$lambda
logistic.fitted$glmnet.fit
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s=2.648e-02,type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_obj)
auc(roc_obj)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.min",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_obj,xlim=c(0,1),ylim=c(0,1))
auc(roc_obj)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.min",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_objs)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.min",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_objs)
library(pROC)
test_pred <- predict(logistic.fitted, test_feat, s="lambda.min",type="class")
test_pred[0:100]
tmp <- rep(0,length(test_class))
tmp[test_pred == 'spam'] = 1
roc_obj <- roc(test_class, tmp,ci=T)
plot(roc_obj)
auc(roc_obj)
auc(roc_obj)
sumamry(class)
summary(class)
roc_const <- roc(test_class, const_pre,ci=T)
const_pre <- rep(0,length(test_class))
roc_const <- roc(test_class, const_pre,ci=T)
auc(roc_const)
plot(roc_const)
const_pre
const_pre <- rep(0,length(test_class))
roc_const < - roc(test_class, const_pre,ci=T)
plot(roc_const)
roc_const < - roc(test_class, const_pre,ci=T)
library(ElemStatLearn)
library(glmnet)
tmp <- rep(0,length(test_class))[test_pred == 'spam'] = 1
install.packages('Rcpp')
install.packages("Rcpp")
source('~/Desktop/test.R')
library('Rcpp')
library('RcppArmadillo')
setwd('C:/Users/Smart/Desktop')
sourceCpp('sfpca.cpp')
library('caret')
install.packages('ggplot2')
library('caret')
Rcpp.package.skeleton("sfpca")
library("Rcpp")
Rcpp.package.skeleton("sfpca")
plot(d$Educ,d$Wage,
main="A scatter plot of LogWage against Education",
xlab='Years of education',
ylab="Wage")
library(readxl)
d <- read_excel("~/Desktop/970415.xlsx")
d <- read_excel("~/Desktop/970415.xlsx")
d$Wage <- exp(d$LogWage)
s <- data.frame(meaning,value)
kable(t(s))
plot(d$Educ,d$Wage,
main="A scatter plot of LogWage against Education",
xlab='Years of education',
ylab="Wage")
PRF1 <- lm(d$Wage~d$Educ)
PRF1$coefficients
PRF2 <- lm(d$LogWage~d$Educ)
PRF2$coefficients
res <- PRF2$residuals
plot(res)
expV <- exp(res)
PRF3 <- lm(expV ~ d$Educ)
PRF3$coefficients
0.0690417 + (exp(0.0690417)*(-0.002318))/( 1.187534511 -0.002318 * 15 )
edu <- unique(d$Educ)
View(d)
View(d)
mean <- vector(mode="numeric",length = length(edu))
meanWage[i] = mean(d$Educ[which = edu[i]])
for(i in 1:length(edu){
for(i in seq(1:length(edu)){
for i in 1:length(edu){
for(i in 1:length(edu)){
meanWage[i] = mean(d$Educ[which = edu[i]])
}
meanWage <- vector(mode="numeric",length = length(edu))
for(i in 1:length(edu)){
meanWage[i] = mean(d$Educ[which = edu[i]])
}
d$Educ[which =
for(i in 1:length(edu)){
meanWage[i] = mean(d$Educ[which = edu[i]])
}
d$Educ[which ==1]
meanWage[i] = mean(which(d$Educ== edu[i]]))
which(d$Educ== 1]
which(d$Educ== 1)
meanWage <- vector(mode="numeric",length = length(edu))
0.0690417 + (exp()*(-0.002318))/()which(d$Educ== 1)
which(d$Educ== 1)
which(d$Educ== 1)
which(d$Educ== 6)
edu[which(d$Educ== 1)]
edu[which(d$Educ== 1),]
d[which(d$Educ== 1),]
d[which(d$Educ== 1),]
d$Wage[which(d$Educ== 1),]
d$Wage[which(d$Educ== 6)]
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
for(i in 1:length(edu)){
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
}
edu <- unique(d$Educ)
meanWage <- vector(mode="numeric",length = length(edu))
for(i in 1:length(edu)){
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
}
res <- data.frame(edu,meanWage)
kable(res)
library(knitr)
res <- data.frame(edu,meanWage)
kable(res)
kable(t(res))
edu <- int(unique(d$Educ))
edu <- integer(unique(d$Educ))
meanWage <- vector(mode="numeric",length = length(edu))
edu <- unique(d$Educ)
meanWage <- vector(mode="numeric",length = length(edu))
for(i in 1:length(edu)){
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
}
res <- data.frame(edu,meanWage)
kable(t(res))
res <- data.frame(edu,meanWage,colnames=c("Years of Education","Mean wage"))
res <- data.frame(edu,meanWage,rownames=c("Years of Education","Mean wage"))
res <- data.frame(edu,meanWage,colnames=c("Years of Education","Mean wage"))
res <- data.frame(edu,meanWage,row.names=c("Years of Education","Mean wage"))
res <- data.frame(edu,meanWage,col.names=c("Years of Education","Mean wage"))
res <- data.frame(edu,meanWage)
colnames(res) <- c("Years of Education","Mean wage")
kable(t(res))
d <- read_excel("~/Desktop/970415.xlsx")
d$Wage <- exp(d$LogWage)
value <- as.numeric(c(summary(d$Wage),sd(d$Wage)))
meaning <-c("Min","First Quantile","Median","Mean","Third Quantile","Max","Standard Error")
s <- data.frame(meaning,value)
colnames(s) <- C("Statistical meaning","Values ($)")
colnames(s) <- c("Statistical meaning","Values ($)")
kable(t(s))
options(digits=4)
kable(t(s))
edu <- as.interger(unique(d$Educ))
edu <- as.integer(unique(d$Educ))
meanWage <- vector(mode="numeric",length = length(edu))
for(i in 1:length(edu)){
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
}
res <- data.frame(edu,meanWage)
colnames(res) <- c("Years of Education(year)","Mean wage($)")
kable(t(res))
predict(SRF1,edu)
PRF2 <- lm(d$LogWage~d$Educ)
predict(SRF1,edu)
predict(SRF2,edu)
predict(PRF2,edu)
meanWage1 <- predict(PRF1.sol,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu))
edu <- as.integer(unique(d$Educ))
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,edu)
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu))
meanWage1 <- predict(PRF1,data.frame(edu),interval=None)
meanWage1 <- predict(PRF1,data.frame(edu),interval=none)
meanWage1 <- predict(PRF1,data.frame(edu))
res <- data.frame(edu,meanWage)
plot(meanWage)
plot(meanWage1)
edu <- as.integer(unique(d$Educ))
data.frame(edu)
meanWage1 <- predict(PRF1,list(edu))
plot(meanWage1)
list(edu)
meanWage1 <- predict(PRF1,list(edu))
plot(meanWage1)
meanWage1 <- predict(PRF1,data.frame(edu=edu))
plot(meanWage1$ )
meanWage1 <- predict(PRF1,data.frame(edu=edu))
plot(meanWage1)
edu <- as.integer(unique(d$Educ))
edu
meanWage1 <- predict(PRF1,data.frame(6:20))
meanWage1 <- predict(PRF1,data.frame(6:20),iterval="confidence")
plot(meanWage1)
plot(meanWage1$fit)
meanWage1 <- predict(PRF1,data.frame(6:20),iterval="confidence")
PRF1 <- lm(d$Wage~d$Educ)
PRF1 <- lm(d$Wage~d$Educ)
meanWage1 <- predict(PRF1,data.frame(6:20),iterval="confidence")
plot(meanWage1$fit)
meanWage1 <- predict(PRF1,data.frame(6:20),interval="confidence")
plot(meanWage1$fit)
meanWage1 <- predict(PRF1,data.frame(6:20),level=0.95,interval="confidence")
plot(meanWage1$fit)
PRF1
meanWage1 <- predict(PRF1,data.frame(Educ=edu),level=0.95,interval="confidence")
plot(meanWage1$fit)
meanWage1 <- fitted(PRF1)
plot(meanWage1$fit)
plot(meanWage1)
meanWage1 <- fitted(PRF2)
plot(meanWage1)
plot(PRF2)
plot(PRF1)
d$Educ
PRF1 <- lm(d$Wage~d$Educ)
PRF1$coefficients
PRF2$coefficients
meanWage <- vector(mode="numeric",length = length(edu))
for(i in 1:length(edu)){
meanWage[i] = mean(d$Wage[which(d$Educ== edu[i])])
}
meanWage1 <- fitted(PRF2)
plot(meanWage1)
meanWage1 <- plot(PRF2)
edu <- as.integer(unique(d$Educ))
edu
res <- data.frame(edu,meanWage)
rs
res
meanWage1 <- predict(PRF2,edu)
meanWage1 <- predict(PRF2,data.frame(edu))
setwd("~/Desktop/MoMA-prototype/Source code")
library(devtools)
build()
library(RcppArmadillo)
Package.skeleton(“new”,funs)
Package.skeleton(“new”,funs)
RcppArmadillo.package.skeleton( "sfpca" )
